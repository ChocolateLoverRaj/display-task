// Build index.js files for addons and tasks
// These files export all the other files
import { dirname } from 'dirname-filename-esm'
import capitalize from 'capitalize'
import { join } from 'path'
import { writeFile, readdir } from 'fs/promises'

const __dirname = dirname(import.meta)

const libPath = join(__dirname, '../lib')

const dirs = new Map()
  .set('tasks', 'task')
  .set('addons', 'addon')


const readDirs = new Map([...dirs.keys()].map(dir => [dir, (async () => {
  const files = await readdir(join(libPath, dir))
  return files
    .filter(file => file.split('.', 2)[1] === 'js')
    .map(file => file.split('.', 1)[0])
    .filter(file => file !== 'index')
})()]))

const getExportDefaultAs = (name, file) => `export { default as ${name} } from './${file}'`
const fileToClass = file => capitalize.words(file).replace(/-/g, '')

console.time('build')
Promise.all([
  ...[...dirs].map(async ([dir, name]) => {
    const dirPath = join(libPath, dir)
    const code = [
      '// Generated by build/build.js',
      getExportDefaultAs(fileToClass(name), `${name}.js`),
      '',
      ...[].concat(...(await readDirs.get(dir)).filter(file => file !== name).map(file => {
        const className = fileToClass(file)
        const fileName = `${file}.js`
        return [
          getExportDefaultAs(className, fileName),
          getExportDefaultAs(`${className}${fileToClass(name)}`, fileName),
          ''
        ]
      }))
    ].join('\n')
    await writeFile(join(dirPath, 'index.js'), code)
  }),
  (async () => {
    const dirFiles = []
    for (const [dir, names] of readDirs) {
      dirFiles.push([dir, await names])
    }
    const code = [
      '// Generated by build/build.js',
      '// Export display-task.js as default because it matches the name of this package',
      'export { default } from \'./display-task.js\'',
      'export { default as DisplayTask } from \'./display-task.js\'',
      '',
      ...[].concat(...dirFiles.map(([dir, names]) => {
        const dirClass = fileToClass(dirs.get(dir))
        const dirIndex = `'./${dir}/index.js'`
        return [
          'export {',
          names
            .map(file => fileToClass(file))
            .map(className => className === dirClass
              ? className
              : `${className}${dirClass}`
            )
            .map(str => `  ${str}`)
            .join(',\n'),
          `} from ${dirIndex}`,
          `export * as ${fileToClass(dir)} from ${dirIndex}`,
          ''
        ]
      }))
    ].join('\n')
    await writeFile(join(libPath, 'index.js'), code)
  })()
])
  .then(() => {
    console.timeEnd('build')
  })
  .catch(e => {
    console.error(e)
    process.exit(1)
  })
